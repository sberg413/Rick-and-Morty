apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.8"
}

tasks.withType(Test).configureEach {
    // https://hithub.com/gradle/gradle/issues/5184
    jacoco.includeNoLocationClasses = true
}

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn 'testDebugUnitTest', 'createDebugCoverageReport'

    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            '**/di/**/*.*',  // Adjust this based on your DI setup
            '**/hilt_aggregated_deps/**/*.*',  // Hilt aggregated dependencies
            '**/dagger/**/*.*',  // Dagger generated classes
            '**/*_Factory.*',  // Dagger generated factories
            '**/*_MembersInjector.*',  // Dagger members injectors
            '**/*_Provide*Factory.*',  // Dagger provides factories
            'android/**/*.*'
    ]

    def kotlinTree = fileTree("$buildDir/tmp/kotlin-classes/debug") {
        exclude fileFilter + ['**/*Activity.class', '**/*Fragment.class', '**/*Application.class']
    }
    def javacTree = fileTree("$buildDir/intermediates/javac/debug") {
        exclude fileFilter
    }
    def hiltTree = fileTree("$buildDir/intermediates/classes/debug/transformDebugClassesWithAsm/dirs/") {
        include '**/Hilt_*.class'
    }

    def mainSrc = fileTree("${project.projectDir}/src/main/java") {
        exclude '**/di/*.kt'
    }

    sourceDirectories.setFrom(mainSrc)
    classDirectories.setFrom(kotlinTree, javacTree, hiltTree)
    executionData.setFrom(fileTree(dir: layout.buildDirectory, includes:
            ['jacoco/testDebugUnitTest.exec',
             'outputs/code_coverage/debugAndroidTest/connected/**/coverage.ec'
        ]))

}
