apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.12"
}
tasks.withType(Test).configureEach {
    jacoco.includeNoLocationClasses = true
    // https://hithub.com/gradle/gradle/issues/5184
    jacoco.excludes = ['jdk.internal.*']
}

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn 'testDebugUnitTest' // , 'createDebugCoverageReport'


    // Excluded files from coverage
    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            '**/di/**/*.*',  // Adjust this based on your DI setup
            '**/hilt_aggregated_deps/**/*.*',  // Hilt aggregated dependencies
            '**/dagger/**/*.*',  // Dagger generated classes
            '**/*_Factory.*',  // Dagger generated factories
            '**/*_MembersInjector.*',  // Dagger members injectors
            '**/*_Provide*Factory.*',  // Dagger provides factories
            'android/**/*.*'
    ]

    def kotlinTree = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def javacTree = fileTree(dir: "$buildDir/intermediates/javac/debug", excludes: fileFilter)

    // Ensuring source directories are correctly set
    def mainSrc = fileTree("${project.projectDir}/src/main/java") {
        exclude '**/di/*.kt'
    }

    sourceDirectories.setFrom(mainSrc)
    classDirectories.setFrom(
            files(kotlinTree, javacTree).asFileTree.matching {
                exclude '**/*$Preview*' // Excludes Jetpack Compose @Preview methods
            }
    )
    executionData.setFrom(fileTree(dir:  buildDir, includes: [
            'build/jacoco/testDebugUnitTest.exec',
            'build/outputs/code_coverage/debugAndroidTest/connected/*/coverage.ec'
        ]).files.findAll{it.exists() }
    )

    reports {
        xml.required.set(true)
        html.required.set(true)
        csv.required.set(false)
    }
}
